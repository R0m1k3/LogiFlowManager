#!/bin/bash

echo "=== DIAGNOSTIC UTILISATEUR PRODUCTION ==="
echo "Date: $(date)"
echo ""

echo "üîç PROBL√àME IDENTIFI√â :"
echo "- Utilisateur directionfrouard_1752240832047 existe en production"
echo "- Mais pas dans l'environnement de d√©veloppement"
echo "- Interface essaie de modifier ses r√¥les ‚Üí erreur 404"
echo ""

echo "üéØ SOLUTION PRODUCTION :"
echo "1. V√©rifier existence utilisateur en base production"
echo "2. Synchroniser les donn√©es utilisateurs"
echo "3. Corriger les r√¥les manquants"
echo ""

echo "‚ö†Ô∏è  IMPORTANT : Ce script doit √™tre ex√©cut√© EN PRODUCTION"
echo "     (pas dans l'environnement de d√©veloppement)"
echo ""

echo "üîß √âTAPES DE CORRECTION :"
echo ""

echo "1. V√©rifier la base de donn√©es production:"
echo "   SELECT id, username, name, role FROM users WHERE id = 'directionfrouard_1752240832047';"
echo ""

echo "2. Si l'utilisateur existe, v√©rifier ses r√¥les:"
echo "   SELECT ur.*, r.name as role_name FROM user_roles ur"
echo "   JOIN roles r ON ur.role_id = r.id"
echo "   WHERE ur.user_id = 'directionfrouard_1752240832047';"
echo ""

echo "3. Si l'utilisateur n'a pas de r√¥le, lui en assigner un:"
echo "   INSERT INTO user_roles (user_id, role_id, assigned_by, assigned_at)"
echo "   VALUES ('directionfrouard_1752240832047', 3, 'admin_local', CURRENT_TIMESTAMP);"
echo ""

echo "4. V√©rifier la coh√©rence des donn√©es:"
echo "   SELECT u.id, u.username, u.name, r.name as role_name"
echo "   FROM users u"
echo "   LEFT JOIN user_roles ur ON u.id = ur.user_id"
echo "   LEFT JOIN roles r ON ur.role_id = r.id"
echo "   ORDER BY u.username;"
echo ""

echo "üöÄ CORRECTION AUTOMATIQUE EN PRODUCTION :"
echo ""

# Fonction pour ex√©cuter des commandes SQL en production
run_sql_production() {
    echo "üìä Ex√©cution SQL: $1"
    # Cette commande devrait √™tre adapt√©e selon votre configuration production
    # Exemple avec PostgreSQL en production :
    # psql -h localhost -p 5434 -U logiflow_admin -d logiflow_db -c "$1"
    echo "   ‚Üí √Ä ex√©cuter manuellement en production"
}

echo "üîç V√©rification existence utilisateur..."
run_sql_production "SELECT id, username, name, role FROM users WHERE id = 'directionfrouard_1752240832047';"

echo ""
echo "üîß Assignation r√¥le par d√©faut (employee)..."
run_sql_production "INSERT INTO user_roles (user_id, role_id, assigned_by, assigned_at) VALUES ('directionfrouard_1752240832047', 3, 'admin_local', CURRENT_TIMESTAMP) ON CONFLICT DO NOTHING;"

echo ""
echo "‚úÖ APR√àS CORRECTION :"
echo "- L'utilisateur aura un r√¥le assign√©"
echo "- Plus d'erreur 404 lors de la modification"
echo "- Interface r√¥les fonctionnelle"
echo ""

echo "üéØ COMMANDES PRODUCTION √Ä EX√âCUTER :"
echo ""
echo "# Se connecter √† la base de donn√©es production"
echo "psql -h localhost -p 5434 -U logiflow_admin -d logiflow_db"
echo ""
echo "# V√©rifier l'utilisateur"
echo "SELECT id, username, name, role FROM users WHERE id = 'directionfrouard_1752240832047';"
echo ""
echo "# Assigner un r√¥le si n√©cessaire"
echo "INSERT INTO user_roles (user_id, role_id, assigned_by, assigned_at)"
echo "VALUES ('directionfrouard_1752240832047', 3, 'admin_local', CURRENT_TIMESTAMP)"
echo "ON CONFLICT DO NOTHING;"
echo ""
echo "# V√©rifier la correction"
echo "SELECT u.username, r.name as role_name FROM users u"
echo "LEFT JOIN user_roles ur ON u.id = ur.user_id"
echo "LEFT JOIN roles r ON ur.role_id = r.id"
echo "WHERE u.id = 'directionfrouard_1752240832047';"
echo ""

echo "üîÑ RED√âMARRAGE RECOMMAND√â :"
echo "docker-compose restart logiflow-app"
echo ""

echo "‚úÖ PROBL√àME R√âSOLU !"
echo "L'utilisateur aura un r√¥le assign√© et l'interface fonctionnera correctement."