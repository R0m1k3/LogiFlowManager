#!/bin/bash

set -e

echo "=== D√âPLOIEMENT MODULE GESTION DES R√îLES - PRODUCTION ==="
echo "Date: $(date)"
echo ""

# Configuration
DB_CONTAINER="logiflow_db"
APP_CONTAINER="logiflow_app"
BACKUP_DIR="/tmp/logiflow_backup_$(date +%Y%m%d_%H%M%S)"

# Fonction pour ex√©cuter du SQL
execute_sql() {
    local sql="$1"
    echo "üìù Ex√©cution SQL: $sql"
    docker exec -i "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -c "$sql"
}

# Fonction pour v√©rifier si une table existe
table_exists() {
    local table="$1"
    result=$(docker exec -i "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -t -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = '$table');")
    echo "$result" | grep -q "t"
}

# Fonction pour v√©rifier si une colonne existe
column_exists() {
    local table="$1"
    local column="$2"
    result=$(docker exec -i "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -t -c "SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_name = '$table' AND column_name = '$column');")
    echo "$result" | grep -q "t"
}

echo "üîç V√âRIFICATION DE L'√âTAT ACTUEL..."

# V√©rifier la connectivit√© √† la base de donn√©es
if ! docker exec "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -c '\l' > /dev/null 2>&1; then
    echo "‚ùå Erreur: Impossible de se connecter √† la base de donn√©es"
    exit 1
fi

echo "‚úÖ Connexion √† la base de donn√©es OK"

# V√©rifier l'√©tat des tables
echo ""
echo "üìã √âTAT DES TABLES:"
tables_to_check=("roles" "permissions" "role_permissions" "user_roles")
missing_tables=()

for table in "${tables_to_check[@]}"; do
    if table_exists "$table"; then
        echo "‚úÖ Table $table - EXISTS"
    else
        echo "‚ùå Table $table - MISSING"
        missing_tables+=("$table")
    fi
done

# V√©rifier les colonnes des tables roles et permissions
echo ""
echo "üìä V√âRIFICATION DES COLONNES:"
role_columns=("display_name" "color" "is_active")
permission_columns=("display_name" "action" "resource" "is_system")

for column in "${role_columns[@]}"; do
    if column_exists "roles" "$column"; then
        echo "‚úÖ roles.$column - EXISTS"
    else
        echo "‚ùå roles.$column - MISSING"
    fi
done

for column in "${permission_columns[@]}"; do
    if column_exists "permissions" "$column"; then
        echo "‚úÖ permissions.$column - EXISTS"
    else
        echo "‚ùå permissions.$column - MISSING"
    fi
done

# Cr√©ation d'une sauvegarde
echo ""
echo "üíæ CR√âATION DE LA SAUVEGARDE..."
mkdir -p "$BACKUP_DIR"
docker exec "$DB_CONTAINER" pg_dump -U logiflow_admin logiflow_db > "$BACKUP_DIR/logiflow_backup.sql"
echo "‚úÖ Sauvegarde cr√©√©e: $BACKUP_DIR/logiflow_backup.sql"

# Mise √† jour du sch√©ma si n√©cessaire
echo ""
echo "üîß MISE √Ä JOUR DU SCH√âMA..."

# Ajouter les colonnes manquantes aux tables roles
execute_sql "ALTER TABLE roles ADD COLUMN IF NOT EXISTS display_name VARCHAR;"
execute_sql "ALTER TABLE roles ADD COLUMN IF NOT EXISTS color VARCHAR DEFAULT '#6b7280';"
execute_sql "ALTER TABLE roles ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE;"

# Ajouter les colonnes manquantes aux tables permissions
execute_sql "ALTER TABLE permissions ADD COLUMN IF NOT EXISTS display_name VARCHAR;"
execute_sql "ALTER TABLE permissions ADD COLUMN IF NOT EXISTS action VARCHAR;"
execute_sql "ALTER TABLE permissions ADD COLUMN IF NOT EXISTS resource VARCHAR;"
execute_sql "ALTER TABLE permissions ADD COLUMN IF NOT EXISTS is_system BOOLEAN DEFAULT FALSE;"

# Cr√©er la table user_roles si elle n'existe pas
if ! table_exists "user_roles"; then
    echo "üìù Cr√©ation de la table user_roles..."
    execute_sql "CREATE TABLE user_roles (
        user_id VARCHAR NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
        assigned_by VARCHAR NOT NULL REFERENCES users(id),
        assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (user_id, role_id)
    );"
fi

# Cr√©er les index pour optimiser les performances
echo ""
echo "üöÄ CR√âATION DES INDEX..."
execute_sql "CREATE INDEX IF NOT EXISTS idx_roles_is_active ON roles (is_active);"
execute_sql "CREATE INDEX IF NOT EXISTS idx_permissions_action ON permissions (action);"
execute_sql "CREATE INDEX IF NOT EXISTS idx_permissions_resource ON permissions (resource);"
execute_sql "CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON user_roles (user_id);"
execute_sql "CREATE INDEX IF NOT EXISTS idx_user_roles_role_id ON user_roles (role_id);"
execute_sql "CREATE INDEX IF NOT EXISTS idx_user_roles_assigned_by ON user_roles (assigned_by);"

# Red√©marrer l'application pour initialiser les r√¥les et permissions
echo ""
echo "üîÑ RED√âMARRAGE DE L'APPLICATION..."
docker restart "$APP_CONTAINER"

# Attendre que l'application red√©marre
echo "‚è≥ Attente du red√©marrage de l'application..."
sleep 10

# V√©rifier que l'application est op√©rationnelle
echo ""
echo "üîç V√âRIFICATION DE L'APPLICATION..."
max_attempts=30
attempt=1
while [ $attempt -le $max_attempts ]; do
    if docker exec "$APP_CONTAINER" curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
        echo "‚úÖ Application op√©rationnelle"
        break
    fi
    echo "‚è≥ Tentative $attempt/$max_attempts - Application en cours de d√©marrage..."
    sleep 2
    attempt=$((attempt + 1))
done

if [ $attempt -gt $max_attempts ]; then
    echo "‚ùå Erreur: Application non op√©rationnelle apr√®s $max_attempts tentatives"
    exit 1
fi

# V√©rifier l'initialisation des r√¥les
echo ""
echo "üè≠ V√âRIFICATION DE L'INITIALISATION DES R√îLES..."
sleep 5

# Compter les r√¥les dans la base de donn√©es
role_count=$(docker exec -i "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -t -c "SELECT COUNT(*) FROM roles;")
permission_count=$(docker exec -i "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -t -c "SELECT COUNT(*) FROM permissions;")

echo "üìä R√¥les cr√©√©s: $(echo $role_count | xargs)"
echo "üìä Permissions cr√©√©es: $(echo $permission_count | xargs)"

# V√©rifier la pr√©sence des r√¥les par d√©faut
echo ""
echo "üîç V√âRIFICATION DES R√îLES PAR D√âFAUT:"
default_roles=("admin" "manager" "employee" "directeur")
for role in "${default_roles[@]}"; do
    if docker exec -i "$DB_CONTAINER" psql -U logiflow_admin -d logiflow_db -t -c "SELECT EXISTS (SELECT 1 FROM roles WHERE name = '$role');" | grep -q "t"; then
        echo "‚úÖ R√¥le $role - EXISTS"
    else
        echo "‚ùå R√¥le $role - MISSING"
    fi
done

# Test des APIs
echo ""
echo "üåê TEST DES APIS..."
if docker exec "$APP_CONTAINER" curl -s http://localhost:3000/api/roles > /dev/null; then
    echo "‚úÖ API /api/roles - OK"
else
    echo "‚ùå API /api/roles - ERREUR"
fi

if docker exec "$APP_CONTAINER" curl -s http://localhost:3000/api/permissions > /dev/null; then
    echo "‚úÖ API /api/permissions - OK"
else
    echo "‚ùå API /api/permissions - ERREUR"
fi

# R√©sum√© final
echo ""
echo "üéØ R√âSUM√â DU D√âPLOIEMENT:"
echo "‚úÖ Sch√©ma de base de donn√©es mis √† jour"
echo "‚úÖ Table user_roles cr√©√©e"
echo "‚úÖ Index de performance cr√©√©s"
echo "‚úÖ Application red√©marr√©e"
echo "‚úÖ R√¥les et permissions initialis√©s"
echo "‚úÖ APIs op√©rationnelles"
echo ""
echo "üíæ Sauvegarde disponible: $BACKUP_DIR/logiflow_backup.sql"
echo ""
echo "üöÄ MODULE DE GESTION DES R√îLES D√âPLOY√â AVEC SUCC√àS!"
echo ""
echo "üìù Prochaines √©tapes:"
echo "1. Connectez-vous √† l'application avec admin/admin"
echo "2. Allez dans Administration > Gestion des R√¥les"
echo "3. Configurez les permissions selon vos besoins"
echo "4. Assignez des r√¥les aux utilisateurs"