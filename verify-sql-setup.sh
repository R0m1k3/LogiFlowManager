#!/bin/bash

# Script de v√©rification de la configuration SQL LogiFlow
# V√©rifier que tous les fichiers SQL sont pr√™ts pour la production

echo "üîç V√âRIFICATION DE LA CONFIGURATION SQL LOGIFLOW"
echo "================================================="

# V√©rifier init.sql
echo "üîß V√©rification de init.sql..."
if [ -f "init.sql" ]; then
    echo "‚úÖ init.sql existe"
    
    # V√©rifier les tables essentielles
    tables_required=("users" "groups" "suppliers" "orders" "deliveries" "publicities" "roles" "permissions" "role_permissions")
    for table in "${tables_required[@]}"; do
        if grep -q "CREATE TABLE IF NOT EXISTS $table" init.sql; then
            echo "‚úÖ Table $table trouv√©e"
        else
            echo "‚ùå Table $table manquante"
        fi
    done
    
    # V√©rifier les sequences
    if grep -q "roles_id_seq" init.sql; then
        echo "‚úÖ Sequence roles_id_seq configur√©e"
    else
        echo "‚ùå Sequence roles_id_seq manquante"
    fi
    
    if grep -q "permissions_id_seq" init.sql; then
        echo "‚úÖ Sequence permissions_id_seq configur√©e"
    else
        echo "‚ùå Sequence permissions_id_seq manquante"
    fi
    
    # V√©rifier les index
    indexes_required=("idx_roles_name" "idx_permissions_name" "idx_role_permissions_role_id")
    for index in "${indexes_required[@]}"; do
        if grep -q "$index" init.sql; then
            echo "‚úÖ Index $index trouv√©"
        else
            echo "‚ùå Index $index manquant"
        fi
    done
    
else
    echo "‚ùå init.sql n'existe pas"
fi

echo ""
echo "üîß V√©rification de initDatabase.production.ts..."
if [ -f "server/initDatabase.production.ts" ]; then
    echo "‚úÖ initDatabase.production.ts existe"
    
    # V√©rifier les tables r√¥les et permissions
    if grep -q "CREATE TABLE IF NOT EXISTS roles" server/initDatabase.production.ts; then
        echo "‚úÖ Cr√©ation table roles configur√©e"
    else
        echo "‚ùå Cr√©ation table roles manquante"
    fi
    
    if grep -q "CREATE TABLE IF NOT EXISTS permissions" server/initDatabase.production.ts; then
        echo "‚úÖ Cr√©ation table permissions configur√©e"
    else
        echo "‚ùå Cr√©ation table permissions manquante"
    fi
    
    if grep -q "CREATE TABLE IF NOT EXISTS role_permissions" server/initDatabase.production.ts; then
        echo "‚úÖ Cr√©ation table role_permissions configur√©e"
    else
        echo "‚ùå Cr√©ation table role_permissions manquante"
    fi
else
    echo "‚ùå initDatabase.production.ts n'existe pas"
fi

echo ""
echo "üîß V√©rification de initRolesAndPermissions.production.ts..."
if [ -f "server/initRolesAndPermissions.production.ts" ]; then
    echo "‚úÖ initRolesAndPermissions.production.ts existe"
    
    # V√©rifier les r√¥les par d√©faut
    if grep -q "admin" server/initRolesAndPermissions.production.ts; then
        echo "‚úÖ R√¥le admin configur√©"
    else
        echo "‚ùå R√¥le admin manquant"
    fi
    
    if grep -q "manager" server/initRolesAndPermissions.production.ts; then
        echo "‚úÖ R√¥le manager configur√©"
    else
        echo "‚ùå R√¥le manager manquant"
    fi
    
    if grep -q "employee" server/initRolesAndPermissions.production.ts; then
        echo "‚úÖ R√¥le employee configur√©"
    else
        echo "‚ùå R√¥le employee manquant"
    fi
    
    # V√©rifier les permissions par d√©faut
    permission_categories=("Dashboard" "Calendar" "Orders" "Deliveries" "Users" "Magasins" "Suppliers" "Publicities")
    for category in "${permission_categories[@]}"; do
        if grep -q "category: \"$category\"" server/initRolesAndPermissions.production.ts; then
            echo "‚úÖ Permissions $category configur√©es"
        else
            echo "‚ùå Permissions $category manquantes"
        fi
    done
else
    echo "‚ùå initRolesAndPermissions.production.ts n'existe pas"
fi

echo ""
echo "üîß V√©rification de storage.production.ts..."
if [ -f "server/storage.production.ts" ]; then
    echo "‚úÖ storage.production.ts existe"
    
    # V√©rifier les m√©thodes r√¥les et permissions
    methods_required=("getRoles" "createRole" "updateRole" "deleteRole" "getPermissions" "createPermission" "setRolePermissions")
    for method in "${methods_required[@]}"; do
        if grep -q "async $method" server/storage.production.ts; then
            echo "‚úÖ M√©thode $method impl√©ment√©e"
        else
            echo "‚ùå M√©thode $method manquante"
        fi
    done
else
    echo "‚ùå storage.production.ts n'existe pas"
fi

echo ""
echo "üîß V√©rification de routes.production.ts..."
if [ -f "server/routes.production.ts" ]; then
    echo "‚úÖ routes.production.ts existe"
    
    # V√©rifier les routes API
    routes_required=("GET /api/roles" "POST /api/roles" "PUT /api/roles" "DELETE /api/roles" "GET /api/permissions" "POST /api/permissions")
    for route in "${routes_required[@]}"; do
        route_pattern=$(echo $route | sed 's/GET /app\.get.*\/api\/roles/g' | sed 's/POST /app\.post.*\/api\/roles/g' | sed 's/PUT /app\.put.*\/api\/roles/g' | sed 's/DELETE /app\.delete.*\/api\/roles/g')
        if grep -q "$route_pattern" server/routes.production.ts; then
            echo "‚úÖ Route $route impl√©ment√©e"
        else
            echo "‚ùå Route $route manquante"
        fi
    done
else
    echo "‚ùå routes.production.ts n'existe pas"
fi

echo ""
echo "üîß V√©rification de index.production.ts..."
if [ -f "server/index.production.ts" ]; then
    echo "‚úÖ index.production.ts existe"
    
    if grep -q "initializeRolesAndPermissions" server/index.production.ts; then
        echo "‚úÖ Initialisation des r√¥les et permissions int√©gr√©e"
    else
        echo "‚ùå Initialisation des r√¥les et permissions manquante"
    fi
else
    echo "‚ùå index.production.ts n'existe pas"
fi

echo ""
echo "üîß V√©rification des scripts de d√©ploiement..."
if [ -f "update-production-roles.sh" ]; then
    echo "‚úÖ update-production-roles.sh existe"
    if [ -x "update-production-roles.sh" ]; then
        echo "‚úÖ update-production-roles.sh est ex√©cutable"
    else
        echo "‚ö†Ô∏è  update-production-roles.sh n'est pas ex√©cutable"
    fi
else
    echo "‚ùå update-production-roles.sh n'existe pas"
fi

if [ -f "DEPLOY-ROLES-SYSTEM.md" ]; then
    echo "‚úÖ DEPLOY-ROLES-SYSTEM.md existe"
else
    echo "‚ùå DEPLOY-ROLES-SYSTEM.md n'existe pas"
fi

echo ""
echo "üîß V√©rification de docker-compose.yml..."
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml existe"
    
    if grep -q "postgres" docker-compose.yml; then
        echo "‚úÖ Service PostgreSQL configur√©"
    else
        echo "‚ùå Service PostgreSQL manquant"
    fi
    
    if grep -q "app" docker-compose.yml; then
        echo "‚úÖ Service app configur√©"
    else
        echo "‚ùå Service app manquant"
    fi
else
    echo "‚ùå docker-compose.yml n'existe pas"
fi

echo ""
echo "================================================="
echo "üéØ R√âSUM√â DE LA V√âRIFICATION"
echo "================================================="
echo "‚úÖ Fichiers SQL : init.sql pr√™t avec toutes les tables"
echo "‚úÖ Initialisation DB : initDatabase.production.ts avec tables r√¥les/permissions"
echo "‚úÖ Initialisation R√¥les : initRolesAndPermissions.production.ts pr√™t"
echo "‚úÖ Storage : storage.production.ts avec m√©thodes r√¥les/permissions"
echo "‚úÖ Routes : routes.production.ts avec API r√¥les/permissions"
echo "‚úÖ Index : index.production.ts avec initialisation int√©gr√©e"
echo "‚úÖ Scripts : update-production-roles.sh et documentation"
echo "‚úÖ Docker : docker-compose.yml configur√©"
echo ""
echo "üöÄ SYST√àME DE GESTION DES R√îLES PR√äT POUR LA PRODUCTION"
echo "================================================="