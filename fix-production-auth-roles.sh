#!/bin/bash

echo "=== CORRECTION AUTHENTIFICATION PRODUCTION ==="
echo "Date: $(date)"
echo ""

echo "üîç PROBL√àME IDENTIFI√â :"
echo "- Utilisateur directionfrouard_1752240832047 n'est pas authentifi√© correctement"
echo "- API /api/roles retourne 401 (Authentification requise)"
echo "- Page des r√¥les ne peut pas charger les donn√©es"
echo ""

echo "üéØ CAUSES POSSIBLES :"
echo "1. Session expir√©e ou invalide"
echo "2. Utilisateur n'existe pas en base de donn√©es"
echo "3. Probl√®me de synchronisation des sessions"
echo "4. R√¥le utilisateur manquant ou invalide"
echo ""

echo "üîß √âTAPES DE DIAGNOSTIC EN PRODUCTION :"
echo ""

echo "1. V√©rifier existence utilisateur:"
echo "   SELECT id, username, email, role, password_changed FROM users WHERE id = 'directionfrouard_1752240832047';"
echo ""

echo "2. V√©rifier sessions actives:"
echo "   SELECT sid, sess, expire FROM sessions WHERE sess::text LIKE '%directionfrouard_1752240832047%';"
echo ""

echo "3. V√©rifier r√¥les utilisateur:"
echo "   SELECT ur.*, r.name as role_name FROM user_roles ur"
echo "   JOIN roles r ON ur.role_id = r.id"
echo "   WHERE ur.user_id = 'directionfrouard_1752240832047';"
echo ""

echo "üöÄ CORRECTION SQL PRODUCTION :"
echo ""

cat << 'EOF'
-- 1. V√©rifier et cr√©er l'utilisateur si n√©cessaire
INSERT INTO users (id, username, email, name, role, password, password_changed)
VALUES (
    'directionfrouard_1752240832047',
    'directionfrouard',
    'direction@frouard.com',
    'Direction Frouard',
    'admin',
    '$2a$10$defaultPasswordHashHere',
    false
) ON CONFLICT (id) DO NOTHING;

-- 2. Assigner un r√¥le admin
INSERT INTO user_roles (user_id, role_id, assigned_by, assigned_at)
VALUES ('directionfrouard_1752240832047', 1, 'system', CURRENT_TIMESTAMP)
ON CONFLICT (user_id, role_id) DO UPDATE SET
    assigned_at = CURRENT_TIMESTAMP;

-- 3. Nettoyer les sessions expir√©es
DELETE FROM sessions WHERE expire < CURRENT_TIMESTAMP;

-- 4. V√©rifier la correction
SELECT 
    u.id,
    u.username,
    u.email,
    u.role as old_role,
    r.name as new_role,
    ur.assigned_at
FROM users u
LEFT JOIN user_roles ur ON u.id = ur.user_id
LEFT JOIN roles r ON ur.role_id = r.id
WHERE u.id = 'directionfrouard_1752240832047';
EOF

echo ""
echo "üìã COMMANDES PRODUCTION :"
echo ""
echo "# Se connecter √† la base de donn√©es"
echo "docker exec -it logiflow-db psql -U logiflow_admin -d logiflow_db"
echo ""
echo "# Ou si PostgreSQL externe:"
echo "psql -h localhost -p 5434 -U logiflow_admin -d logiflow_db"
echo ""
echo "# Ex√©cuter les requ√™tes SQL ci-dessus"
echo "# Puis red√©marrer l'application"
echo "docker-compose restart logiflow-app"
echo ""

echo "üîç V√âRIFICATION APR√àS CORRECTION :"
echo "1. L'utilisateur peut se connecter"
echo "2. API /api/roles retourne 200 OK"
echo "3. Page des r√¥les s'affiche correctement"
echo "4. Couleurs des r√¥les visibles"
echo ""

echo "‚ö†Ô∏è  NOTES IMPORTANTES :"
echo "- Remplacer le hash de mot de passe par un vrai hash"
echo "- L'utilisateur devra changer son mot de passe"
echo "- V√©rifier les permissions du r√¥le admin"
echo ""

echo "‚úÖ APR√àS CORRECTION :"
echo "- Authentification fonctionnelle"
echo "- Interface des r√¥les accessible"
echo "- Toutes les couleurs et fonctionnalit√©s actives"