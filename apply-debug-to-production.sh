#!/bin/bash

echo "üöÄ Application des corrections debug en production"
echo "‚è±Ô∏è  $(date '+%H:%M:%S') - D√©but du d√©ploiement"

echo ""
echo "üìù Corrections √† appliquer en production :"
echo "‚úÖ Routes POST /api/groups avec logs d√©taill√©s"
echo "‚úÖ Routes POST /api/suppliers avec logs d√©taill√©s"
echo "‚úÖ Corrections apiRequest dans tous les composants frontend"
echo "‚úÖ Logs d'erreur PostgreSQL complets"

echo ""
echo "üê≥ Pour appliquer en production Docker :"
echo ""

echo "1Ô∏è‚É£ REBUILD ET RED√âPLOIEMENT :"
echo "cd /chemin/vers/logiflow"
echo "docker-compose down"
echo "docker-compose build --no-cache"
echo "docker-compose up -d"
echo ""

echo "2Ô∏è‚É£ OU MISE √Ä JOUR VIA PULL :"
echo "# Si vous utilisez un registry Docker"
echo "docker pull votre-registry/logiflow:latest"
echo "docker-compose down && docker-compose up -d"
echo ""

echo "3Ô∏è‚É£ V√âRIFICATION APR√àS D√âPLOIEMENT :"
echo "docker logs -f logiflow-app"
echo "# Puis tester la cr√©ation d'un groupe"
echo ""

echo "üîç ALTERNATIVE - COPIE MANUELLE DES FICHIERS :"
echo "# Si vous avez acc√®s aux fichiers directement"
echo "docker cp server/routes.production.ts logiflow-app:/app/server/"
echo "docker restart logiflow-app"
echo ""

echo "‚ö†Ô∏è  NOTE IMPORTANTE :"
echo "Les logs de debug ne s'afficheront qu'APR√àS le red√©ploiement."
echo "Le code actuel en production n'a PAS encore ces logs d√©taill√©s."

echo ""
echo "‚è±Ô∏è  $(date '+%H:%M:%S') - Script pr√™t"
echo "üéØ √âTAPE SUIVANTE : Red√©ployer en production puis tester la cr√©ation"