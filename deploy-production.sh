#!/bin/bash

echo "üöÄ D√âPLOIEMENT PRODUCTION LOGIFLOW"
echo "=================================="
echo ""

echo "√âTAPE 1: V√âRIFICATIONS PR√â-D√âPLOIEMENT"
echo "--------------------------------------"

# V√©rifier que tous les fichiers critiques existent
FILES_TO_CHECK=(
    "migration-production.sql"
    "server/initDatabase.production.ts"
    "server/storage.production.ts"
    "server/routes.production.ts"
    "server/index.production.ts"
    "client/src/hooks/useAuthUnified.ts"
    "client/src/lib/dateUtils.ts"
    "docker-compose.yml"
)

echo "V√©rification des fichiers critiques..."
for file in "${FILES_TO_CHECK[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file MANQUANT"
        exit 1
    fi
done

echo ""
echo "√âTAPE 2: BUILD ET D√âPLOIEMENT"
echo "-----------------------------"

echo "üîß Arr√™t des conteneurs existants..."
docker-compose down

echo "üèóÔ∏è  Build et d√©marrage des nouveaux conteneurs..."
docker-compose up -d --build

echo ""
echo "√âTAPE 3: V√âRIFICATIONS POST-D√âPLOIEMENT"
echo "---------------------------------------"

echo "‚è±Ô∏è  Attente de d√©marrage des services (30 secondes)..."
sleep 30

# V√©rifier que les conteneurs sont en cours d'ex√©cution
echo "üìä Statut des conteneurs:"
docker-compose ps

echo ""
echo "üîç V√©rification de l'application..."
HEALTH_CHECK=$(curl -s -w "%{http_code}" http://localhost:3000/api/health -o /dev/null)

if [ "$HEALTH_CHECK" = "200" ]; then
    echo "‚úÖ Application accessible sur http://localhost:3000"
else
    echo "‚ùå Application non accessible (Code: $HEALTH_CHECK)"
    echo "üìã Logs du conteneur:"
    docker-compose logs app
    exit 1
fi

echo ""
echo "üóÑÔ∏è  V√©rification de la base de donn√©es..."
DB_CHECK=$(docker-compose exec -T db psql -U logiflow_admin -d logiflow_db -c "SELECT COUNT(*) FROM users;" 2>/dev/null)

if [[ $DB_CHECK == *"1"* ]]; then
    echo "‚úÖ Base de donn√©es accessible et initialis√©e"
else
    echo "‚ùå Probl√®me de base de donn√©es"
    docker-compose logs db
    exit 1
fi

echo ""
echo "√âTAPE 4: TESTS FONCTIONNELS"
echo "---------------------------"

echo "üß™ Test de l'authentification..."
AUTH_TEST=$(curl -s -X POST http://localhost:3000/api/login \
    -H "Content-Type: application/json" \
    -d '{"username":"admin","password":"admin"}' \
    -w "%{http_code}")

if [[ $AUTH_TEST == *"200"* ]]; then
    echo "‚úÖ Authentification fonctionnelle"
else
    echo "‚ùå Probl√®me d'authentification"
fi

echo ""
echo "üéØ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !"
echo "===================================="
echo ""
echo "üìã R√âSUM√â :"
echo "‚Ä¢ Application: http://localhost:3000"
echo "‚Ä¢ Base de donn√©es: PostgreSQL (port 5434)"
echo "‚Ä¢ Authentification: admin / admin"
echo "‚Ä¢ Migration: Automatique au d√©marrage"
echo ""
echo "üìù DONN√âES PR√âSERV√âES :"
echo "‚Ä¢ Toutes les donn√©es existantes sont conserv√©es"
echo "‚Ä¢ Nouvelles colonnes ajout√©es automatiquement"
echo "‚Ä¢ Aucune perte de donn√©es lors de la migration"
echo ""
echo "üîß MODULES FONCTIONNELS :"
echo "‚Ä¢ Dashboard avec statistiques"
echo "‚Ä¢ Calendrier des commandes/livraisons"
echo "‚Ä¢ Gestion commandes (avec quantity/unit)"
echo "‚Ä¢ Gestion livraisons et rapprochement BL"
echo "‚Ä¢ Module publicit√©s complet"
echo "‚Ä¢ Gestion utilisateurs et r√¥les"
echo "‚Ä¢ Commandes clients"
echo ""
echo "‚úÖ PRODUCTION OP√âRATIONNELLE !"
echo ""