#!/bin/bash

echo "üöÄ SCRIPT DE D√âPLOIEMENT LOGIFLOW PRODUCTION"
echo "============================================="
echo ""

# V√©rifications pr√©alables
echo "1. V√©rification des fichiers essentiels..."

# V√©rifier les fichiers de production
essential_files=(
    "server/index.production.ts"
    "server/db.production.ts" 
    "server/auth-utils.production.ts"
    "server/localAuth.production.ts"
    "server/storage.production.ts"
    "server/routes.production.ts"
    "server/initDatabase.production.ts"
    "server/initRolesAndPermissions.production.ts"
    "Dockerfile"
    "docker-compose.yml"
    "migration-production.sql"
)

missing_files=()
for file in "${essential_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    else
        echo "‚úÖ $file"
    fi
done

if [ ${#missing_files[@]} -ne 0 ]; then
    echo "‚ùå Fichiers manquants:"
    printf '%s\n' "${missing_files[@]}"
    exit 1
fi

echo ""
echo "2. V√©rification de la syntaxe des fichiers production..."

# Test de syntaxe TypeScript (simulation esbuild)
if command -v npx &> /dev/null; then
    echo "   Testing build production simulation..."
    # Test avec esbuild sur index.production.ts uniquement
    if npx esbuild server/index.production.ts --bundle --platform=node --format=esm --outfile=/tmp/test-build.js --external:* 2>/dev/null; then
        echo "‚úÖ Build production simulation r√©ussie"
        rm -f /tmp/test-build.js
    else
        echo "‚ùå Erreur dans le build production"
        exit 1
    fi
else
    echo "   npx non disponible, test build ignor√©"
fi

echo ""
echo "3. V√©rification de la coh√©rence Dockerfile..."

# V√©rifier que le Dockerfile r√©f√©rence le bon fichier
if grep -q "server/index.production.ts" Dockerfile; then
    echo "‚úÖ Dockerfile utilise index.production.ts"
else
    echo "‚ùå Dockerfile ne r√©f√©rence pas index.production.ts"
    exit 1
fi

# V√©rifier les modules externes
required_externals=("express" "pg" "drizzle-orm" "passport" "connect-pg-simple")
for module in "${required_externals[@]}"; do
    if grep -q "external:$module" Dockerfile; then
        echo "‚úÖ Module $module d√©clar√© externe"
    else
        echo "‚ùå Module $module non d√©clar√© externe"
        exit 1
    fi
done

echo ""
echo "4. V√©rification des variables d'environnement..."

if [ -f ".env" ]; then
    if grep -q "DATABASE_URL" .env; then
        echo "‚úÖ DATABASE_URL configur√©e"
    else
        echo "‚ö†Ô∏è  DATABASE_URL non trouv√©e dans .env"
    fi
else
    echo "‚ö†Ô∏è  Fichier .env non trouv√© (normal en production Docker)"
fi

echo ""
echo "5. Test de build (simulation)..."

# V√©rifier les d√©pendances package.json
if [ -f "package.json" ]; then
    echo "‚úÖ package.json pr√©sent"
    
    # V√©rifier les d√©pendances critiques
    critical_deps=("express" "pg" "drizzle-orm" "passport")
    for dep in "${critical_deps[@]}"; do
        if grep -q "\"$dep\":" package.json; then
            echo "‚úÖ D√©pendance $dep pr√©sente"
        else
            echo "‚ùå D√©pendance $dep manquante"
            exit 1
        fi
    done
else
    echo "‚ùå package.json manquant"
    exit 1
fi

echo ""
echo "6. V√©rification des ports et configuration..."

# V√©rifier la configuration des ports
if grep -q "3000" Dockerfile; then
    echo "‚úÖ Port 3000 configur√© dans Dockerfile"
else
    echo "‚ùå Port 3000 non configur√©"
fi

if grep -q "3000" docker-compose.yml; then
    echo "‚úÖ Port 3000 configur√© dans docker-compose.yml"
else
    echo "‚ùå Port 3000 non configur√© dans docker-compose.yml"
fi

echo ""
echo "7. V√©rification des imports et r√©f√©rences..."

# V√©rifier qu'il n'y a pas de r√©f√©rences bcrypt
if grep -r "import.*bcrypt" server/*.production.ts 2>/dev/null; then
    echo "‚ùå R√©f√©rences bcrypt trouv√©es dans les fichiers production"
    exit 1
else
    echo "‚úÖ Aucune r√©f√©rence bcrypt dans les fichiers production"
fi

# V√©rifier les imports entre fichiers production
if grep -q "initRolesAndPermissions.production" server/routes.production.ts; then
    echo "‚úÖ Import initRolesAndPermissions.production correct"
else
    echo "‚ùå Import initRolesAndPermissions incorrect"
    exit 1
fi

echo ""
echo "üéâ TOUTES LES V√âRIFICATIONS PASS√âES !"
echo ""
echo "Votre application LogiFlow est pr√™te pour le d√©ploiement Docker :"
echo ""
echo "Commands de d√©ploiement :"
echo "========================"
echo "1. Build de l'image :"
echo "   docker-compose build"
echo ""
echo "2. D√©marrage des services :"
echo "   docker-compose up -d"
echo ""
echo "3. V√©rification des logs :"
echo "   docker-compose logs -f app"
echo ""
echo "4. Test de sant√© :"
echo "   curl http://localhost:3000/api/health"
echo ""
echo "5. Acc√®s √† l'application :"
echo "   http://localhost:3000"
echo "   Login: admin / admin"
echo ""
echo "Configuration finale :"
echo "- ‚úÖ PostgreSQL standard (pas de WebSocket)"
echo "- ‚úÖ Authentification native (pas de bcrypt)"  
echo "- ‚úÖ Migration s√©curis√©e avec pr√©servation des donn√©es"
echo "- ‚úÖ Port 3000 configur√©"
echo "- ‚úÖ Tous les modules fonctionnels"
echo ""
echo "L'application est maintenant d√©ployable en production ! üöÄ"