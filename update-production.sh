#!/bin/bash

echo "üîß MISE √Ä JOUR PRODUCTION LOGIFLOW"
echo "=================================="

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

# V√©rifier si docker-compose est install√©
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

echo "‚úÖ Docker et Docker Compose d√©tect√©s"

# Arr√™ter les conteneurs existants
echo "üõë Arr√™t des conteneurs existants..."
docker-compose down

# Reconstruire l'image sans cache
echo "üî® Reconstruction de l'image Docker..."
docker-compose build --no-cache

# Red√©marrer les conteneurs
echo "üöÄ Red√©marrage des conteneurs..."
docker-compose up -d

# Attendre que les services d√©marrent
echo "‚è≥ Attente du d√©marrage des services..."
sleep 10

# V√©rifier l'√©tat des conteneurs
echo "üìä √âtat des conteneurs:"
docker-compose ps

# Tester la connectivit√©
echo "üîç Test de connectivit√©..."
if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "‚úÖ Application accessible sur port 3000"
else
    echo "‚ö†Ô∏è  Application non accessible - v√©rifiez les logs:"
    echo "   docker-compose logs -f"
fi

echo ""
echo "üéØ MISE √Ä JOUR TERMIN√âE"
echo "======================"
echo "Application: http://localhost:3000"
echo "Connexion: admin / admin"
echo ""
echo "Si probl√®me persistant, consultez les logs:"
echo "docker-compose logs -f"