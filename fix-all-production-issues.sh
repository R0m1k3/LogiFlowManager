#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${RED}üö® CORRECTION URGENTE REACT ERROR #310 PRODUCTION${NC}"
echo "=================================================="

echo -e "${YELLOW}1. V√âRIFICATION STRUCTURE BACKEND PRODUCTION${NC}"

# V√©rifier structure actuelle
echo "üîç Test API structure production actuelle..."
curl -s -c /tmp/prod_test -X POST http://localhost:5000/api/login -H 'Content-Type: application/json' -d '{"username":"admin","password":"admin"}' > /dev/null

if [ $? -eq 0 ]; then
    echo "‚úÖ Login production r√©ussi"
    
    # Test permissions
    PERM_TEST=$(curl -s -b /tmp/prod_test http://localhost:5000/api/permissions | jq '.[0] | has("displayName") and has("action")' 2>/dev/null)
    if [ "$PERM_TEST" = "true" ]; then
        echo "‚úÖ Structure permissions correcte en d√©veloppement"
    else
        echo "‚ùå Structure permissions incorrecte - displayName/action manquants"
    fi
    
    # Test r√¥les
    ROLES_TEST=$(curl -s -b /tmp/prod_test http://localhost:5000/api/roles | jq '.[0] | has("displayName") and has("permissions")' 2>/dev/null)
    if [ "$ROLES_TEST" = "true" ]; then
        echo "‚úÖ Structure r√¥les correcte en d√©veloppement"
    else
        echo "‚ùå Structure r√¥les incorrecte"
    fi
else
    echo "‚ùå √âchec login - v√©rifier authentification"
fi

echo ""
echo -e "${YELLOW}2. V√âRIFICATION FICHIERS SOURCES${NC}"

# V√©rifier les corrections dans storage.production.ts
if grep -q "displayName.*manquant" server/storage.production.ts; then
    echo "‚úÖ Corrections pr√©sentes dans storage.production.ts"
else
    echo "‚ùå Corrections manquantes dans storage.production.ts"
    echo "üîß Application des corrections..."
    
    # Appliquer les corrections directement
    sed -i 's/name: perm\.name || '\'''\'',$/ name: perm.name || '\''\'',\n        displayName: perm.display_name || perm.name || '\''\'',  \/\/ ‚úÖ Ajout displayName manquant/g' server/storage.production.ts
    sed -i 's/category: perm\.category || '\''other'\'',$/ category: perm.category || '\''other\'',\n        action: perm.action || perm.name || '\''\'',            \/\/ ‚úÖ Ajout action manquant/g' server/storage.production.ts
    
    echo "‚úÖ Corrections appliqu√©es √† storage.production.ts"
fi

echo ""
echo -e "${YELLOW}3. RED√âMARRAGE APPLICATION${NC}"

# Red√©marrer pour appliquer les changements
echo "üîÑ Red√©marrage application..."
pkill -f "tsx server/index.ts" 2>/dev/null
sleep 2

# D√©marrer en arri√®re-plan
nohup npm run dev > /tmp/app.log 2>&1 &
sleep 5

# V√©rifier red√©marrage
if pgrep -f "tsx server/index.ts" > /dev/null; then
    echo "‚úÖ Application red√©marr√©e"
else
    echo "‚ùå √âchec red√©marrage"
    exit 1
fi

echo ""
echo -e "${YELLOW}4. VALIDATION CORRECTIONS${NC}"

# Attendre que l'application soit pr√™te
sleep 10

# Test final
echo "üîç Test final structure APIs..."
curl -s -c /tmp/final_test -X POST http://localhost:5000/api/login -H 'Content-Type: application/json' -d '{"username":"admin","password":"admin"}' > /dev/null

if [ $? -eq 0 ]; then
    # Test permissions final
    FINAL_PERM=$(curl -s -b /tmp/final_test http://localhost:5000/api/permissions | jq '.[0] | {name, displayName, action}' 2>/dev/null)
    echo "üìä Structure permission finale:"
    echo "$FINAL_PERM"
    
    # Test r√¥les final
    FINAL_ROLES=$(curl -s -b /tmp/final_test http://localhost:5000/api/roles | jq '.[0] | {name, displayName, permissions: (.permissions | length)}' 2>/dev/null)
    echo "üìä Structure r√¥le finale:"
    echo "$FINAL_ROLES"
    
    # V√©rification critique
    HAS_DISPLAY=$(echo "$FINAL_PERM" | jq -r '.displayName != null' 2>/dev/null)
    HAS_ACTION=$(echo "$FINAL_PERM" | jq -r '.action != null' 2>/dev/null)
    
    if [ "$HAS_DISPLAY" = "true" ] && [ "$HAS_ACTION" = "true" ]; then
        echo -e "${GREEN}‚úÖ REACT ERROR #310 R√âSOLU${NC}"
        echo "Structure compl√®te: displayName + action pr√©sents"
    else
        echo -e "${RED}‚ùå PROBL√àME PERSISTANT${NC}"
        echo "displayName: $HAS_DISPLAY, action: $HAS_ACTION"
    fi
else
    echo "‚ùå √âchec test final"
fi

echo ""
echo -e "${BLUE}üìù INSTRUCTIONS PRODUCTION${NC}"
echo "Pour production Docker:"
echo "1. docker-compose down"
echo "2. docker-compose up --build -d"
echo "3. Tester page Gestion des R√¥les"

echo ""
echo -e "${GREEN}‚úÖ CORRECTION TERMIN√âE${NC}"

# Nettoyage
rm -f /tmp/prod_test /tmp/final_test