#!/bin/bash

echo "=== DIAGNOSTIC PRODUCTION - MODULE R√îLES ==="
echo "Date: $(date)"
echo ""

# Fonction pour tester une API avec authentification
test_api() {
    local endpoint=$1
    local description=$2
    
    echo "üîç Test $description..."
    
    # Obtenir un cookie de session via login
    login_response=$(curl -s -c cookies.txt -b cookies.txt -X POST \
        -H "Content-Type: application/json" \
        -d '{"username":"admin","password":"admin"}' \
        http://localhost:3000/api/login)
    
    if echo "$login_response" | grep -q "success\|redirect\|user"; then
        echo "‚úÖ Authentification r√©ussie"
        
        # Tester l'API avec les cookies
        api_response=$(curl -s -b cookies.txt http://localhost:3000$endpoint)
        echo "üìã R√©ponse de $endpoint:"
        echo "$api_response" | jq . 2>/dev/null || echo "$api_response"
        echo ""
    else
        echo "‚ùå Erreur d'authentification"
        echo "R√©ponse: $login_response"
        echo ""
    fi
    
    # Nettoyer les cookies
    rm -f cookies.txt
}

echo "üè• V√âRIFICATION DE L'√âTAT DE L'APPLICATION..."

# V√©rifier que l'application r√©pond
if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "‚úÖ Application accessible sur http://localhost:3000"
else
    echo "‚ùå Application non accessible"
    exit 1
fi

echo ""
echo "üîê TEST DES APIs D'AUTHENTIFICATION..."

# Test de l'API de login
login_test=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d '{"username":"admin","password":"admin"}' \
    http://localhost:3000/api/login)

echo "üìã R√©ponse login:"
echo "$login_test"
echo ""

echo "üé≠ TEST DES APIs DE GESTION DES R√îLES..."

# Tester les APIs des r√¥les
test_api "/api/roles" "API R√¥les"
test_api "/api/permissions" "API Permissions"

echo "üóÉÔ∏è V√âRIFICATION DE LA BASE DE DONN√âES..."

# Cr√©er un script SQL temporaire pour les v√©rifications
cat > /tmp/check_roles_db.sql << 'EOF'
-- V√©rifier l'existence des tables
\dt roles;
\dt permissions;
\dt role_permissions;
\dt user_roles;

-- Compter les donn√©es
SELECT 'roles' as table_name, COUNT(*) as count FROM roles
UNION ALL
SELECT 'permissions' as table_name, COUNT(*) as count FROM permissions
UNION ALL
SELECT 'role_permissions' as table_name, COUNT(*) as count FROM role_permissions
UNION ALL
SELECT 'user_roles' as table_name, COUNT(*) as count FROM user_roles;

-- Afficher quelques exemples de donn√©es
SELECT 'ROLES SAMPLE:' as info;
SELECT id, name, display_name, is_system FROM roles LIMIT 5;

SELECT 'PERMISSIONS SAMPLE:' as info;
SELECT id, name, display_name, category FROM permissions LIMIT 10;
EOF

echo "üìä V√©rification des tables et donn√©es..."

# Ex√©cuter les v√©rifications de base de donn√©es
if command -v psql > /dev/null 2>&1; then
    echo "üìã R√©sultats de la base de donn√©es:"
    PGPASSWORD="LogiFlow2025!" psql -h localhost -p 5434 -U logiflow_admin -d logiflow_db -f /tmp/check_roles_db.sql 2>/dev/null || {
        echo "‚ùå Connexion √† la base de donn√©es √©chou√©e"
        echo "üí° V√©rifiez que PostgreSQL fonctionne sur le port 5434"
    }
else
    echo "‚ö†Ô∏è psql non disponible pour v√©rifier la base de donn√©es"
fi

rm -f /tmp/check_roles_db.sql

echo ""
echo "üìÅ V√âRIFICATION DES FICHIERS DE PRODUCTION..."

# V√©rifier les fichiers critiques
critical_files=(
    "server/storage.production.ts"
    "server/routes.production.ts"
    "server/initRolesAndPermissions.ts"
    "init.sql"
)

for file in "${critical_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
        
        # V√©rifications sp√©cifiques
        case $file in
            "server/storage.production.ts")
                if grep -q "async getRoles" "$file"; then
                    echo "  ‚úÖ M√©thode getRoles() pr√©sente"
                else
                    echo "  ‚ùå M√©thode getRoles() manquante"
                fi
                
                if grep -q "async getPermissions" "$file"; then
                    echo "  ‚úÖ M√©thode getPermissions() pr√©sente"
                else
                    echo "  ‚ùå M√©thode getPermissions() manquante"
                fi
                ;;
                
            "server/routes.production.ts")
                if grep -q "/api/roles" "$file"; then
                    echo "  ‚úÖ Routes /api/roles pr√©sentes"
                else
                    echo "  ‚ùå Routes /api/roles manquantes"
                fi
                ;;
                
            "init.sql")
                if grep -q "CREATE TABLE.*roles" "$file"; then
                    echo "  ‚úÖ Table roles dans init.sql"
                else
                    echo "  ‚ùå Table roles manquante dans init.sql"
                fi
                ;;
        esac
    else
        echo "‚ùå $file manquant"
    fi
done

echo ""
echo "üê≥ V√âRIFICATION DU CONTENEUR DOCKER..."

if docker ps | grep -q logiflow; then
    echo "‚úÖ Conteneur LogiFlow en cours d'ex√©cution"
    
    # V√©rifier les logs r√©cents
    echo "üìã Logs r√©cents du conteneur:"
    docker logs --tail=20 $(docker ps -q --filter name=logiflow) 2>/dev/null || echo "‚ùå Impossible de r√©cup√©rer les logs"
else
    echo "‚ùå Conteneur LogiFlow non trouv√©"
fi

echo ""
echo "üéØ R√âSUM√â DU DIAGNOSTIC..."

# D√©terminer les probl√®mes probables
echo "üîç ANALYSE DES PROBL√àMES POTENTIELS:"
echo ""

echo "1. APIs retournent 'Aucun r√¥le trouv√©' = Tables vides ou m√©thodes d√©faillantes"
echo "2. Erreur 401 = Probl√®me d'authentification ou routes manquantes"
echo "3. Erreur 500 = M√©thodes storage cass√©es ou base de donn√©es inaccessible"
echo ""

echo "üí° SOLUTIONS RECOMMAND√âES:"
echo ""
echo "Si les tables sont vides:"
echo "  ‚Üí Ex√©cuter: docker exec -it \$(docker ps -q --filter name=logiflow) node -e \"require('./dist/server/initRolesAndPermissions.js').initRolesAndPermissions()\""
echo ""
echo "Si les m√©thodes sont manquantes:"
echo "  ‚Üí Reconstruire le conteneur: docker-compose up -d --build"
echo ""
echo "Si l'authentification √©choue:"
echo "  ‚Üí V√©rifier les cookies et sessions dans les logs"
echo ""

echo "=== FIN DU DIAGNOSTIC ==="