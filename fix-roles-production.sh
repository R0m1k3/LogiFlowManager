#!/bin/bash

echo "üîß Script de mise √† jour des r√¥les pour la production"
echo "================================================="

# Fonction pour ex√©cuter une requ√™te SQL
execute_sql() {
    local query="$1"
    echo "Ex√©cution: $query"
    docker exec -i $(docker ps -q --filter name=postgres) psql -U logiflow_admin -d logiflow_db -c "$query"
}

echo ""
echo "üìã √âtat actuel des r√¥les:"
execute_sql "SELECT id, name, display_name, description, color FROM roles ORDER BY name;"

echo ""
echo "üîÑ Mise √† jour des r√¥les..."

# Mise √† jour du r√¥le admin
execute_sql "UPDATE roles SET display_name = 'Administrateur', description = 'Acc√®s complet √† toutes les fonctionnalit√©s du syst√®me', color = '#dc2626' WHERE name = 'admin';"

# Mise √† jour du r√¥le manager  
execute_sql "UPDATE roles SET display_name = 'Manager', description = 'Acc√®s √† la gestion des commandes, livraisons et fournisseurs', color = '#2563eb' WHERE name = 'manager';"

# Mise √† jour du r√¥le employee
execute_sql "UPDATE roles SET display_name = 'Employ√©', description = 'Acc√®s en lecture aux donn√©es et publicit√©s', color = '#16a34a' WHERE name = 'employee';"

# Mise √† jour du r√¥le directeur
execute_sql "UPDATE roles SET display_name = 'Directeur', description = 'Supervision g√©n√©rale et gestion strat√©gique', color = '#7c3aed' WHERE name = 'directeur';"

echo ""
echo "‚úÖ √âtat final des r√¥les:"
execute_sql "SELECT id, name, display_name, description, color, is_system, is_active FROM roles ORDER BY name;"

echo ""
echo "üß™ Test de l'API des r√¥les..."
echo "Red√©marrage du conteneur pour prendre en compte les changements..."
docker-compose restart logiflow

echo ""
echo "‚úÖ Mise √† jour des r√¥les termin√©e !"
echo "Les r√¥les de base sont maintenant correctement configur√©s pour la production."