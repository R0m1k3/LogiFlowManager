#!/bin/bash

echo "üîß CORRECTION AUTHENTIFICATION SESSION PRODUCTION"
echo "================================================"

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

echo "‚úÖ Docker d√©tect√©"

# Arr√™ter les conteneurs existants
echo "üõë Arr√™t des conteneurs existants..."
docker-compose down

# Nettoyer les images obsol√®tes
echo "üßπ Nettoyage des images obsol√®tes..."
docker system prune -f

# Reconstruire l'image sans cache
echo "üî® Reconstruction compl√®te de l'image Docker..."
docker-compose build --no-cache

# Red√©marrer les conteneurs
echo "üöÄ Red√©marrage des conteneurs..."
docker-compose up -d

# Attendre que les services d√©marrent
echo "‚è≥ Attente du d√©marrage des services..."
sleep 15

# V√©rifier l'√©tat des conteneurs
echo "üìä √âtat des conteneurs:"
docker-compose ps

# Afficher les logs pour diagnostic
echo "üìã Logs de d√©marrage:"
docker-compose logs --tail=20 logiflow-app

# Tester la connectivit√©
echo "üîç Test de connectivit√©..."
if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "‚úÖ Application accessible sur port 3000"
    
    # Tester la page de connexion
    if curl -f http://localhost:3000/ > /dev/null 2>&1; then
        echo "‚úÖ Page de connexion accessible"
    else
        echo "‚ö†Ô∏è  Page de connexion non accessible"
    fi
else
    echo "‚ùå Application non accessible - v√©rifiez les logs:"
    echo "   docker-compose logs -f logiflow-app"
fi

echo ""
echo "üéØ CORRECTION TERMIN√âE"
echo "====================="
echo "Application: http://localhost:3000"
echo "Connexion: admin / admin"
echo ""
echo "‚úÖ CORRECTIONS APPLIQU√âES:"
echo "- Remplacement MemoryStore par PostgreSQL session store"
echo "- Configuration session s√©curis√©e pour production"
echo "- Persistance des sessions entre red√©marrages"
echo ""
echo "Si probl√®me persistant, consultez les logs:"
echo "docker-compose logs -f logiflow-app"